import logging
import os
import asyncio
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

if not TOKEN or not ETHERSCAN_API_KEY:
    print("–û–®–ò–ë–ö–ê: –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ TELEGRAM_TOKEN –∏ ETHERSCAN_API_KEY")
    exit(1)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BlockedAddressChecker:
    # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    KNOWN_BLOCKED = {
        "0x8576acc5c05d6ce88f4e49bf65bdf0c62f91353c": "–§–∏—à–∏–Ω–≥",
        "0x1da5821544e25c636c1417ba96ade4cf6d2f9b5a": "–í–∑–ª–æ–º",
        "0x9f4cda013e354b8fc285bf4b9a60460cee7f7ea9": "–û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥"
    }

    @staticmethod
    async def is_blocked(address: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        address_lower = address.lower()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        if address_lower in BlockedAddressChecker.KNOWN_BLOCKED:
            return {
                'blocked': True,
                'reason': BlockedAddressChecker.KNOWN_BLOCKED[address_lower],
                'source': '–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞'
            }
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API —Ç–æ–∫–µ–Ω–æ–≤ (–∫–æ—Å–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        async with aiohttp.ClientSession() as session:
            url = f"https://api.etherscan.io/api?module=account&action=tokentx&address={address}&apikey={ETHERSCAN_API_KEY}"
            try:
                async with session.get(url) as resp:
                    data = await resp.json()
                    if data.get('message') == 'NOTOK' and 'blocked' in str(data.get('result', '')).lower():
                        return {
                            'blocked': True,
                            'reason': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤',
                            'source': 'Etherscan API'
                        }
            except Exception as e:
                logger.error(f"Blocked check error: {str(e)}")
        
        return {'blocked': False}

class EtherscanAPI:
    @staticmethod
    async def get_balance(address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH"""
        url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    if data.get('status') == '1':
                        return int(data['result']) / 10**18
        except Exception as e:
            logger.error(f"Balance error: {str(e)}")
        return 0.0

    @staticmethod
    async def is_contract(address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º"""
        url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    return data.get('status') == '1' and data['result'] != 'Contract source code not verified'
        except Exception as e:
            logger.error(f"Contract check error: {str(e)}")
        return False

async def analyze_address(address: str) -> dict:
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞"""
    balance, is_blocked, is_contract = await asyncio.gather(
        EtherscanAPI.get_balance(address),
        BlockedAddressChecker.is_blocked(address),
        EtherscanAPI.is_contract(address)
    )
    return {
        'address': address,
        'balance': balance,
        'is_blocked': is_blocked,
        'is_contract': is_contract,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

def format_report(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    report = [
        f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞</b> <code>{data['address']}</code>",
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {data['balance']:.6f} ETH",
        f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if data['is_contract'] else '–ö–æ—à–µ–ª–µ–∫'}"
    ]
    
    if data['is_blocked']['blocked']:
        report.append(
            f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ê–î–†–ï–° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù!</b>\n"
            f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {data['is_blocked']['reason']}\n"
            f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {data['is_blocked']['source']}\n\n"
            f"‚ö†Ô∏è <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ª—é–±—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç—Ç–∏–º –∞–¥—Ä–µ—Å–æ–º</i>"
        )
    else:
        report.append("‚úÖ <b>–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö</b>")
    
    report.append(f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['timestamp']}</i>")
    
    return "\n\n".join(report)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ETH –∫–æ—à–µ–ª—å–∫–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH –∞–¥—Ä–µ—Å (0x...) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
        "- –ë–∞–ª–∞–Ω—Å ETH\n"
        "- –ù–∞–ª–∏—á–∏–µ –≤ —á—ë—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö\n"
        "- –¢–∏–ø –∞–¥—Ä–µ—Å–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0x742d35Cc6634C0532925a3b844Bc454e4438f44e</code>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = update.message.text.strip()
    
    if not (address.startswith('0x') and len(address) == 42):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞")
        return
    
    msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...")
    
    try:
        analysis = await analyze_address(address)
        await msg.edit_text(format_report(analysis), parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
