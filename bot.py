import logging
import os
import asyncio
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

if not TOKEN or not ETHERSCAN_API_KEY:
    print("–û–®–ò–ë–ö–ê: –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ TELEGRAM_TOKEN –∏ ETHERSCAN_API_KEY")
    print("–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env —Ñ–∞–π–ª–∞:")
    print("TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    print("ETHERSCAN_API_KEY=–≤–∞—à_–∫–ª—é—á_etherscan")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EtherscanAPI:
    BASE_URL = "https://api.etherscan.io/api"
    
    @staticmethod
    async def get_balance(address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH"""
        params = {
            'module': 'account',
            'action': 'balance',
            'address': address,
            'tag': 'latest',
            'apikey': ETHERSCAN_API_KEY
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(EtherscanAPI.BASE_URL, params=params) as resp:
                    data = await resp.json()
                    if data['status'] == '1':
                        return int(data['result']) / 10**18
                    logger.error(f"Balance error: {data.get('message')}")
                    return 0.0
        except Exception as e:
            logger.error(f"Balance fetch failed: {str(e)}")
            return 0.0

    @staticmethod
    async def check_blacklist(address: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ Etherscan"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ tags API
        params = {
            'module': 'account',
            'action': 'txlist',
            'address': address,
            'startblock': 0,
            'endblock': 99999999,
            'sort': 'asc',
            'apikey': ETHERSCAN_API_KEY
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                async with session.get(EtherscanAPI.BASE_URL, params=params) as resp:
                    data = await resp.json()
                    if isinstance(data.get('result'), str) and 'blocked' in data['result'].lower():
                        return {
                            'risk': True,
                            'reason': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Etherscan (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫)',
                            'source': 'Etherscan API'
                        }
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ (—á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ USDT/USDC)
                token_params = params.copy()
                token_params['action'] = 'tokentx'
                async with session.get(EtherscanAPI.BASE_URL, params=token_params) as resp:
                    token_data = await resp.json()
                    if isinstance(token_data.get('result'), str) and 'blocked' in token_data['result'].lower():
                        return {
                            'risk': True,
                            'reason': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ (USDT/USDC)',
                            'source': 'Etherscan Token API'
                        }
        
        except Exception as e:
            logger.error(f"Blacklist check failed: {str(e)}")
        
        return {'risk': False}

    @staticmethod
    async def is_contract(address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º"""
        params = {
            'module': 'contract',
            'action': 'getabi',
            'address': address,
            'apikey': ETHERSCAN_API_KEY
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(EtherscanAPI.BASE_URL, params=params) as resp:
                    data = await resp.json()
                    return data.get('status') == '1' and data['result'] != 'Contract source code not verified'
        except Exception as e:
            logger.error(f"Contract check failed: {str(e)}")
            return False

async def analyze_address(address: str) -> dict:
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞"""
    balance, risk, is_contract = await asyncio.gather(
        EtherscanAPI.get_balance(address),
        EtherscanAPI.check_blacklist(address),
        EtherscanAPI.is_contract(address)
    )
    return {
        'address': address,
        'balance': balance,
        'risk': risk,
        'is_contract': is_contract,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

def format_report(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    balance_msg = f"{data['balance']:.6f} ETH"
    if data['balance'] == 0:
        balance_msg += " (–ø—É—Å—Ç–æ–π)"
    
    risk_msg = (
        f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ê–¥—Ä–µ—Å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!</b>\n"
        f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {data['risk']['reason']}\n"
        f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {data['risk']['source']}"
    ) if data['risk']['risk'] else "‚úÖ <b>–ù–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö</b>"
    
    return (
        f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞</b> <code>{data['address']}</code>\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance_msg}\n"
        f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if data['is_contract'] else '–ö–æ—à–µ–ª–µ–∫'}\n\n"
        f"{risk_msg}\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['timestamp']}</i>"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ETH –∫–æ—à–µ–ª—å–∫–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH –∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x, 42 —Å–∏–º–≤–æ–ª–∞) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
        "- –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "- –ù–∞–ª–∏—á–∏–µ –≤ —á—ë—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö\n"
        "- –¢–∏–ø –∞–¥—Ä–µ—Å–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0x742d35Cc6634C0532925a3b844Bc454e4438f44e</code>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = update.message.text.strip()
    
    if not (address.startswith('0x') and len(address) == 42):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞",
            parse_mode="HTML"
        )
        return
    
    msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...")
    
    try:
        analysis = await analyze_address(address)
        report = format_report(analysis)
        await msg.edit_text(report, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Analysis failed: {str(e)}")
        await msg.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    application.run_polling()

if __name__ == "__main__":
    main()
