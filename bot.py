import logging
import os
import asyncio
import aiohttp
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
from dotenv import load_dotenv

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_PHRASE, CHOOSE_ACTION, ENTER_ADDRESS, ENTER_REASON, CONFIRM_REMOVE = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")
SECRET_PHRASE = os.getenv("SECRET_PHRASE", "mysecret123")
BLACKLIST_FILE = "blacklist.json"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_blacklist():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"""
    try:
        if not os.path.exists(BLACKLIST_FILE):
            with open(BLACKLIST_FILE, 'w') as f:
                json.dump({}, f)
            return {}
        
        with open(BLACKLIST_FILE, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ blacklist.json: {str(e)}")
        return {}

def save_blacklist(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    try:
        with open(BLACKLIST_FILE, 'w') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è blacklist.json: {str(e)}")
        return False

async def analyze_address(address: str) -> str:
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞"""
    try:
        address_lower = address.lower()
        report = []
        blacklist = load_blacklist()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
        if address_lower in blacklist:
            reason = blacklist[address_lower].get('reason', '–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            source = blacklist[address_lower].get('source', '–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω')
            report.append("üî¥ <b>–ê–î–†–ï–° –í –ß–Å–†–ù–û–ú –°–ü–ò–°–ö–ï</b>")
            report.append(f"üìõ –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            report.append(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
        else:
            report.append("üü¢ –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Etherscan
        if ETHERSCAN_API_KEY:
            async with aiohttp.ClientSession() as session:
                # –ë–∞–ª–∞–Ω—Å
                balance_url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
                async with session.get(balance_url) as resp:
                    data = await resp.json()
                    balance = int(data['result']) / 10**18 if data.get('status') == '1' else 0
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                contract_url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
                async with session.get(contract_url) as resp:
                    contract_data = await resp.json()
                    is_contract = contract_data.get('status') == '1' and contract_data['result'] != 'Contract source code not verified'

            report.extend([
                f"\nüîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞:</b> <code>{address}</code>",
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.4f} ETH",
                f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if is_contract else '–ö–æ—à–µ–ª—ë–∫'}"
            ])
        else:
            report.append("\n‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Etherscan –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á)")
        
        return "\n".join(report)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üõ°Ô∏è <b>AML Ethereum Analyzer</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x, 42 —Å–∏–º–≤–æ–ª–∞)\n"
        "/blacklist - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º\n\n"
        "–ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: <code>0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326</code>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–¥—Ä–µ—Å–∞–º–∏"""
    try:
        address = update.message.text.strip()
        
        if not (address.startswith("0x") and len(address) == 42):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...")
        result = await analyze_address(address)
        await msg.edit_text(result, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ blacklist.json
    if not os.path.exists(BLACKLIST_FILE):
        with open(BLACKLIST_FILE, 'w') as f:
            json.dump({}, f)
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª blacklist.json")

    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
