import logging
import os
import asyncio
import warnings
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from gql import gql, Client
from gql.transport.aiohttp import AIOHTTPTransport
from dotenv import load_dotenv

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ SSL
warnings.filterwarnings("ignore", 
    message="By default, AIOHTTPTransport does not verify SSL certificates")

# –§–∏–∫—Å –¥–ª—è RUVDS
os.environ['NO_PROXY'] = 'api.telegram.org,graphql.bitquery.io'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
BITQUERY_KEY = os.getenv("BITQUERY_API_KEY")

async def analyze_address(address: str, network: str = "ethereum") -> str:
    """–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ (ethereum/bsc/polygon)"""
    transport = AIOHTTPTransport(
        url="https://graphql.bitquery.io",
        headers={"X-API-KEY": BITQUERY_KEY},
        timeout=30,
        ssl=True
    )

    try:
        async with Client(
                transport=transport,
                execute_timeout=45,
                fetch_schema_from_transport=False
        ) as session:
            query = gql(f"""
                query AnalyzeAddress($address: String!) {{
                  {network} {{
                    address(address: {{is: $address}}) {{
                      annotations
                      smartContract {{ contractType }}
                      balance {{
                        currency {{ symbol }}
                        value
                      }}
                    }}
                  }}
                }}
            """)
            result = await session.execute(query, variable_values={"address": address})
            
            if not result.get(network) or not result[network].get("address"):
                return "üîç –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π —Å–µ—Ç–∏"
            
            data = result[network]["address"][0]
            risks = []
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
            if data["annotations"]:
                risks.extend(data["annotations"])
            if data["smartContract"]:
                risks.append(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç ({data['smartContract']['contractType']})")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
            balance_info = ""
            if data.get("balance"):
                for bal in data["balance"]:
                    balance_info += f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {bal['value']} {bal['currency']['symbol']}"

            risk_msg = "‚ö†Ô∏è –†–∏—Å–∫–∏: " + ", ".join(risks) if risks else "‚úÖ –ê–¥—Ä–µ—Å —á–∏—Å—Ç"
            return f"{risk_msg}\n–°–µ—Ç—å: {network.upper()}{balance_info}"

    except Exception as e:
        logger.error(f"Bitquery error ({network}): {str(e)[:200]}")
        return f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ—Ç–∏ {network.upper()}"

async def full_analysis(address: str) -> str:
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö"""
    networks = ["ethereum", "binance-smart-chain", "polygon"]
    results = []
    
    for network in networks:
        result = await analyze_address(address, network)
        results.append(result)
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    return "\n\n".join(results)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await update.message.reply_text(
            "üõ°Ô∏è AML Bot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏: Ethereum, BSC, Polygon\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å (—Ñ–æ—Ä–º–∞—Ç 0x...) –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "–ü—Ä–∏–º–µ—Ä: 0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326"
        )
    except Exception as e:
        logger.error(f"Start error: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–¥—Ä–µ—Å–∞–º–∏"""
    try:
        address = update.message.text.strip()

        if not (address.startswith("0x") and len(address) == 42):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞")
            return

        msg = await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ –≤—Å–µ—Ö —Å–µ—Ç—è—Ö...")
        result = await full_analysis(address)
        await msg.edit_text(result)

    except Exception as e:
        logger.error(f"Message error: {e}")
        await update.message.reply_text("‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        logger.info("Starting bot...")

        application = ApplicationBuilder() \
            .token(TOKEN) \
            .http_version("1.1") \
            .get_updates_http_version("1.1") \
            .pool_timeout(30) \
            .connect_timeout(30) \
            .build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_message
        ))

        application.run_polling(
            poll_interval=1.0,
            timeout=30,
            drop_pending_updates=True
        )

    except Exception as e:
        logger.critical(f"Fatal error: {e}")
        raise

if __name__ == "__main__":
    asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())
    main()
