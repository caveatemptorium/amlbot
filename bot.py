import logging
import os
import asyncio
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY") or "YOUR_API_KEY"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AddressValidator:
    @staticmethod
    def is_valid_eth_address(address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ETH –∞–¥—Ä–µ—Å–∞"""
        if not isinstance(address, str):
            return False
        if not address.startswith('0x'):
            return False
        if len(address) != 42:
            return False
        try:
            int(address, 16)
            return True
        except ValueError:
            return False

class RiskAnalyzer:
    BLACKLIST = {
        "0x8576acc5c05d6ce88f4e49bf65bdf0c62f91353c": "–§–∏—à–∏–Ω–≥",
        "0x1da5821544e25c636c1417ba96ade4cf6d2f9b5a": "–û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥",
        "0xae2fc483527b8ef99eb5d9b44875f005ba1fae13": "–í–∑–ª–æ–º"
    }

    @staticmethod
    async def check_risk(address: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç—å"""
        address_lower = address.lower()
        if address_lower in RiskAnalyzer.BLACKLIST:
            return {
                "risk": True,
                "reason": RiskAnalyzer.BLACKLIST[address_lower],
                "source": "–õ–æ–∫–∞–ª—å–Ω—ã–π —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Etherscan API
        try:
            url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&page=1&offset=1&sort=asc&apikey={ETHERSCAN_API_KEY}"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    if data.get('message') == 'NOTOK' and 'blocked' in str(data.get('result', '')).lower():
                        return {
                            "risk": True,
                            "reason": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Etherscan",
                            "source": "Etherscan API"
                        }
        except Exception as e:
            logger.error(f"Risk check error: {str(e)}")
        
        return {"risk": False}

class EtherscanClient:
    @staticmethod
    async def get_balance(address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH"""
        url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                if data.get('status') == '1':
                    return int(data['result']) / 10**18
                return 0.0

    @staticmethod
    async def is_contract(address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º"""
        url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                return data.get('status') == '1' and data['result'] != 'Contract source code not verified'

    @staticmethod
    async def get_transaction_count(address: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&page=1&offset=1&sort=asc&apikey={ETHERSCAN_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                return len(data.get('result', [])) if data.get('status') == '1' else 0

class AddressAnalyzer:
    @staticmethod
    async def analyze_address(address: str) -> dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞"""
        if not AddressValidator.is_valid_eth_address(address):
            raise ValueError("Invalid ETH address")

        balance = await EtherscanClient.get_balance(address)
        is_contract = await EtherscanClient.is_contract(address)
        tx_count = await EtherscanClient.get_transaction_count(address)
        risk_info = await RiskAnalyzer.check_risk(address)

        return {
            'address': address,
            'balance': balance,
            'is_contract': is_contract,
            'tx_count': tx_count,
            'risk': risk_info,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

def format_report(analysis: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    risk_msg = (
        f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –†–∏—Å–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!</b>\n"
        f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {analysis['risk']['reason']}\n"
        f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {analysis['risk']['source']}"
    ) if analysis['risk']['risk'] else "‚úÖ <b>–†–∏—Å–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</b>"

    return (
        f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞</b> <code>{analysis['address']}</code>\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {analysis['balance']:.6f} ETH\n"
        f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if analysis['is_contract'] else '–ö–æ—à–µ–ª—ë–∫'}\n"
        f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {analysis['tx_count']}\n\n"
        f"{risk_msg}\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {analysis['timestamp']}</i>"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è <b>ETH Address Analyzer Bot</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH-–∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x, 42 —Å–∏–º–≤–æ–ª–∞) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326</code>",
        parse_mode="HTML"
    )

async def analyze_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        address = update.message.text.strip()
        
        if not AddressValidator.is_valid_eth_address(address):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞!</b>\n"
                "ETH –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω:\n"
                "- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x\n"
                "- –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 42 —Å–∏–º–≤–æ–ª–∞\n"
                "- –°–æ—Å—Ç–æ—è—Ç—å –∏–∑ hex-—Å–∏–º–≤–æ–ª–æ–≤ (0-9, a-f)\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>0x742d35Cc6634C0532925a3b844Bc454e4438f44e</code>",
                parse_mode="HTML"
            )
            return

        msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–¥—Ä–µ—Å...")
        
        try:
            analysis = await AddressAnalyzer.analyze_address(address)
            report = format_report(analysis)
            await msg.edit_text(report, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Analysis error: {str(e)}")
            await msg.edit_text(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å\n"
                "- –ü—Ä–æ–±–ª–µ–º—ã —Å API Etherscan\n"
                "- –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"Handler error: {str(e)}")
        await update.message.reply_text("üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder() \
        .token(TOKEN) \
        .http_version("1.1") \
        .get_updates_http_version("1.1") \
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
