import logging
import os
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from gql import gql, Client
from gql.transport.aiohttp import AIOHTTPTransport
from dotenv import load_dotenv

# –§–∏–∫—Å –¥–ª—è RUVDS: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∫—Å–∏ –¥–ª—è Telegram
os.environ['NO_PROXY'] = 'api.telegram.org,graphql.bitquery.io'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
BITQUERY_KEY = os.getenv("BITQUERY_API_KEY")

async def analyze_address(address: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Bitquery —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    transport = AIOHTTPTransport(
        url="https://graphql.bitquery.io",
        headers={"X-API-KEY": BITQUERY_KEY},
        timeout=30
    )
    
    try:
        async with Client(
            transport=transport,
            execute_timeout=45,
            fetch_schema_from_transport=False
        ) as session:
            query = gql("""
                query AnalyzeAddress($address: String!) {
                  ethereum {
                    address(address: {is: $address}) {
                      annotations
                      smartContract { contractType }
                    }
                  }
                }
            """)
            result = await session.execute(query, variable_values={"address": address})
            data = result["ethereum"]["address"][0]
            
            if not data:
                return "üîç –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                
            risks = []
            if data["annotations"]:
                risks.extend(data["annotations"])
            if data["smartContract"]:
                risks.append(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç ({data['smartContract']['contractType']})")
                
            return "‚ö†Ô∏è –†–∏—Å–∫–∏: " + ", ".join(risks) if risks else "‚úÖ –ê–¥—Ä–µ—Å —á–∏—Å—Ç"
            
    except Exception as e:
        logger.error(f"Bitquery error: {str(e)[:200]}")
        return "‚õî –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await update.message.reply_text(
            "üõ°Ô∏è AML Bot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH/BSC –∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
            "–ü—Ä–∏–º–µ—Ä: 0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326"
        )
    except Exception as e:
        logger.error(f"Start error: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        address = update.message.text.strip()
        
        if not (address.startswith("0x") and len(address) == 42):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞")
            return
        
        msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...")
        result = await analyze_address(address)
        await msg.edit_text(result)
        
    except Exception as e:
        logger.error(f"Message error: {e}")
        await update.message.reply_text("‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        logger.info("Starting bot...")
        
        # –§–∏–∫—Å –¥–ª—è RUVDS: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ keepalive
        application = ApplicationBuilder() \
            .token(TOKEN) \
            .http_version("1.1") \
            .get_updates_http_version("1.1") \
            .pool_timeout(30) \
            .connect_timeout(30) \
            .build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_message
        ))
        
        application.run_polling(
            poll_interval=1.0,
            timeout=30,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
        raise

if __name__ == "__main__":
    # –§–∏–∫—Å –¥–ª—è asyncio –Ω–∞ RUVDS
    asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())
    main()
