import logging
import os
import asyncio
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN or not ETHERSCAN_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_TOKEN –∏ ETHERSCAN_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EtherscanAPI:
    BASE_URL = "https://api.etherscan.io/api"
    
    @staticmethod
    async def _make_request(params: dict) -> dict:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(EtherscanAPI.BASE_URL, params=params) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        return data if isinstance(data, dict) else {}
                    return {"status": "0", "message": f"HTTP error {resp.status}"}
        except Exception as e:
            logger.error(f"Request failed: {str(e)}")
            return {"status": "0", "message": str(e)}

    @staticmethod
    async def get_balance(address: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH"""
        params = {
            'module': 'account',
            'action': 'balance',
            'address': address,
            'tag': 'latest',
            'apikey': ETHERSCAN_API_KEY
        }
        data = await EtherscanAPI._make_request(params)
        if data.get('status') == '1' and data.get('result'):
            try:
                balance_wei = int(data['result'])
                return {
                    'success': True,
                    'balance': balance_wei / 10**18,
                    'raw': data
                }
            except (ValueError, TypeError) as e:
                logger.error(f"Balance conversion error: {str(e)}")
        return {
            'success': False,
            'error': data.get('message', 'Unknown error'),
            'raw': data
        }

    @staticmethod
    async def check_risk(address: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        params = {
            'module': 'account',
            'action': 'txlist',
            'address': address,
            'startblock': 0,
            'endblock': 99999999,
            'sort': 'asc',
            'apikey': ETHERSCAN_API_KEY
        }
        data = await EtherscanAPI._make_request(params)
        
        if isinstance(data.get('result'), str) and 'blocked' in data['result'].lower():
            return {
                'risk': True,
                'reason': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Etherscan',
                'source': 'Transaction API',
                'success': True
            }
        
        return {
            'risk': False,
            'success': True if data.get('status') == '1' else False,
            'error': data.get('message', 'No risk detected')
        }

    @staticmethod
    async def get_transaction_count(address: str) -> dict:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        params = {
            'module': 'account',
            'action': 'txlist',
            'address': address,
            'startblock': 0,
            'endblock': 99999999,
            'sort': 'asc',
            'apikey': ETHERSCAN_API_KEY
        }
        data = await EtherscanAPI._make_request(params)
        if data.get('status') == '1' and isinstance(data.get('result'), list):
            return {
                'success': True,
                'count': len(data['result']),
                'raw': data
            }
        return {
            'success': False,
            'error': data.get('message', 'Unknown error'),
            'raw': data
        }

    @staticmethod
    async def is_contract(address: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
        params = {
            'module': 'contract',
            'action': 'getabi',
            'address': address,
            'apikey': ETHERSCAN_API_KEY
        }
        data = await EtherscanAPI._make_request(params)
        if data.get('status') == '1':
            return {
                'success': True,
                'is_contract': data['result'] != 'Contract source code not verified',
                'raw': data
            }
        return {
            'success': False,
            'error': data.get('message', 'Unknown error'),
            'raw': data
        }

async def analyze_address(address: str) -> dict:
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞"""
    results = await asyncio.gather(
        EtherscanAPI.get_balance(address),
        EtherscanAPI.check_risk(address),
        EtherscanAPI.get_transaction_count(address),
        EtherscanAPI.is_contract(address),
        return_exceptions=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    balance_data = results[0] if not isinstance(results[0], Exception) else {
        'success': False,
        'error': str(results[0])
    }
    risk_data = results[1] if not isinstance(results[1], Exception) else {
        'success': False,
        'error': str(results[1]),
        'risk': False
    }
    tx_data = results[2] if not isinstance(results[2], Exception) else {
        'success': False,
        'error': str(results[2])
    }
    contract_data = results[3] if not isinstance(results[3], Exception) else {
        'success': False,
        'error': str(results[3])
    }
    
    return {
        'address': address,
        'balance': balance_data.get('balance', 0.0) if balance_data['success'] else None,
        'risk': risk_data,
        'tx_count': tx_data.get('count', 0) if tx_data['success'] else None,
        'is_contract': contract_data.get('is_contract', False) if contract_data['success'] else None,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'errors': [
            err for data in [balance_data, risk_data, tx_data, contract_data]
            if not data['success']
            for err in [data.get('error')]
            if err
        ]
    }

def format_report(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    parts = [f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞</b> <code>{data['address']}</code>\n"]
    
    # –ë–∞–ª–∞–Ω—Å
    if data['balance'] is not None:
        balance_msg = f"{data['balance']:.6f} ETH"
        if data['balance'] == 0:
            balance_msg += " (–ø—É—Å—Ç–æ–π)"
        parts.append(f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance_msg}")
    else:
        parts.append("üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
    
    # –¢–∏–ø –∞–¥—Ä–µ—Å–∞
    if data['is_contract'] is not None:
        parts.append(f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if data['is_contract'] else '–ö–æ—à–µ–ª–µ–∫'}")
    else:
        parts.append("üìú <b>–¢–∏–ø:</b> ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
    
    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if data['tx_count'] is not None:
        parts.append(f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {data['tx_count']}")
    else:
        parts.append("üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
    
    # –†–∏—Å–∫–∏
    if data['risk']['success']:
        if data['risk']['risk']:
            parts.append(
                f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ê–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n"
                f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {data['risk']['reason']}\n"
                f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {data['risk']['source']}"
            )
        else:
            parts.append("‚úÖ <b>–†–∏—Å–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</b>")
    else:
        parts.append("‚ö†Ô∏è <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å")
    
    # –û—à–∏–±–∫–∏
    if data.get('errors'):
        parts.append("\n‚ö†Ô∏è <i>–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:</i>")
        for error in data['errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
            parts.append(f"‚Ä¢ {error}")
    
    parts.append(f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['timestamp']}</i>")
    
    return "\n".join(parts)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üõ°Ô∏è <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ETH –∫–æ—à–µ–ª—å–∫–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH –∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x, 42 —Å–∏–º–≤–æ–ª–∞) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
        "- –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "- –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0x742d35Cc6634C0532925a3b844Bc454e4438f44e</code>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–¥—Ä–µ—Å–∞–º–∏"""
    address = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if not (address.startswith('0x') and len(address) == 42):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>0x742d35Cc6634C0532925a3b844Bc454e4438f44e</code>",
            parse_mode="HTML"
        )
        return
    
    msg = await update.message.reply_text("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —Å Etherscan...")
    
    try:
        analysis = await analyze_address(address)
        report = format_report(analysis)
        await msg.edit_text(report, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Analysis failed: {str(e)}")
        await msg.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await application.run_polling()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TOKEN:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        exit(1)
    if not ETHERSCAN_API_KEY:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ETHERSCAN_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
