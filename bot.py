import logging
import os
import asyncio
import aiohttp
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
from dotenv import load_dotenv

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_PHRASE, CHOOSE_ACTION, ENTER_ADDRESS, ENTER_REASON, CONFIRM_REMOVE = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")
SECRET_PHRASE = os.getenv("SECRET_PHRASE", "mysecret123")
BLACKLIST_FILE = "blacklist.json"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º ---
def load_blacklist():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–±–µ–∑ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞)"""
    try:
        with open(BLACKLIST_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª blacklist.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ blacklist.json: {str(e)}")
        return None

def save_blacklist(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    try:
        with open(BLACKLIST_FILE, 'w') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è blacklist.json: {str(e)}")
        return False

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ AML-–ø—Ä–æ–≤–µ—Ä–∫–∏ ---
async def analyze_address(address: str) -> str:
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ (Etherscan + —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫)"""
    try:
        address_lower = address.lower()
        report = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω)
        blacklist = load_blacklist()
        if blacklist is not None and address_lower in blacklist:
            reason = blacklist[address_lower].get('reason', '–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            report.append("üî¥ <b>–ê–î–†–ï–° –í –ß–Å–†–ù–û–ú –°–ü–ò–°–ö–ï</b>")
            report.append(f"üìõ –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Etherscan
        async with aiohttp.ClientSession() as session:
            # 1. –ë–∞–ª–∞–Ω—Å
            balance_url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
            async with session.get(balance_url) as resp:
                data = await resp.json()
                balance = int(data['result']) / 10**18 if data.get('status') == '1' else 0
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            contract_url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
            async with session.get(contract_url) as resp:
                contract_data = await resp.json()
                is_contract = contract_data.get('status') == '1' and contract_data['result'] != 'Contract source code not verified'

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        report.extend([
            f"\nüîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞:</b> <code>{address}</code>",
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.4f} ETH",
            f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if is_contract else '–ö–æ—à–µ–ª—ë–∫'}"
        ])
        
        return "\n".join(report)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞"

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º ---
async def start_blacklist_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º"""
    if load_blacklist() is None:
        await update.message.reply_text(
            "‚ùå <b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª blacklist.json –≤—Ä—É—á–Ω—É—é",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üîí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É</b> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
        parse_mode="HTML"
    )
    return ENTER_PHRASE

async def check_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã"""
    user_phrase = update.message.text.strip()
    
    if user_phrase != SECRET_PHRASE:
        await update.message.reply_text("‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞!</b>\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML")
        return ConversationHandler.END
    
    context.user_data['phrase'] = user_phrase
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data='add')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data='remove')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚úÖ <b>–ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –≤–µ—Ä–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    return CHOOSE_ACTION

async def handle_action_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == 'cancel':
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END
    elif action == 'add':
        await query.edit_message_text(
            "üì• <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>ETH-–∞–¥—Ä–µ—Å</b> (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x, 42 —Å–∏–º–≤–æ–ª–∞):",
            parse_mode="HTML"
        )
        return ENTER_ADDRESS
    elif action == 'remove':
        blacklist = load_blacklist()
        if not blacklist:
            await query.edit_message_text("‚ÑπÔ∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return ConversationHandler.END
            
        await query.edit_message_text(
            "üì§ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>ETH-–∞–¥—Ä–µ—Å</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            parse_mode="HTML"
        )
        return CONFIRM_REMOVE

async def check_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    blacklist = load_blacklist()
    if blacklist is None:
        await update.message.reply_text("‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return ConversationHandler.END
    
    address = update.message.text.strip()
    
    if not (address.startswith('0x') and len(address) == 42):
        await update.message.reply_text("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel", parse_mode="HTML")
        return ENTER_ADDRESS
    
    address_lower = address.lower()
    
    if address_lower in blacklist:
        reason = blacklist[address_lower].get('reason', '–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        await update.message.reply_text(
            f"‚ö†Ô∏è <b>–ê–¥—Ä–µ—Å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ</b>\n"
            f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    context.user_data['address'] = address_lower
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–∏—á–∏–Ω—É</b> –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:",
        parse_mode="HTML"
    )
    return ENTER_REASON

async def save_to_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    blacklist = load_blacklist()
    if blacklist is None:
        await update.message.reply_text("‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return ConversationHandler.END
    
    reason = update.message.text.strip()
    address = context.user_data['address']
    user = update.effective_user
    
    blacklist[address] = {
        'reason': reason,
        'added_by': user.id,
        'username': user.username,
        'date': str(asyncio.get_event_loop().time())
    }
    
    if save_blacklist(blacklist):
        await update.message.reply_text(
            f"‚úÖ <b>–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!</b>\n\n"
            f"<code>{address}</code>\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    return ConversationHandler.END

async def remove_from_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    blacklist = load_blacklist()
    if blacklist is None:
        await update.message.reply_text("‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return ConversationHandler.END
    
    address = update.message.text.strip().lower()
    
    if address not in blacklist:
        await update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    removed_entry = blacklist.pop(address)
    
    if save_blacklist(blacklist):
        await update.message.reply_text(
            f"‚úÖ <b>–ê–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!</b>\n\n"
            f"<code>{address}</code>\n"
            f"–ë—ã–ª–∞ –ø—Ä–∏—á–∏–Ω–∞: {removed_entry.get('reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üõ°Ô∏è <b>AML Ethereum Analyzer</b>\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "‚Ä¢ /blacklist - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º\n\n"
        "–ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: <code>0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326</code>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–¥—Ä–µ—Å–∞–º–∏"""
    try:
        address = update.message.text.strip()
        
        if not (address.startswith("0x") and len(address) == 42):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...")
        result = await analyze_address(address)
        await msg.edit_text(result, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = ApplicationBuilder() \
        .token(TOKEN) \
        .http_version("1.1") \
        .get_updates_http_version("1.1") \
        .pool_timeout(30) \
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('blacklist', start_blacklist_management)],
        states={
            ENTER_PHRASE: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_phrase)],
            CHOOSE_ACTION: [CallbackQueryHandler(handle_action_choice)],
            ENTER_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_address)],
            ENTER_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_to_blacklist)],
            CONFIRM_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_from_blacklist)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
