import logging
import os
import asyncio
import aiohttp
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
from dotenv import load_dotenv

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_PHRASE, CHOOSE_ACTION, ENTER_ADDRESS, ENTER_REASON, CONFIRM_REMOVE = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")
SECRET_PHRASE = os.getenv("SECRET_PHRASE", "–º–æ–π—Å–µ–∫—Ä–µ—Ç123")
BLACKLIST_FILE = "blacklist.json"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_blacklist():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    try:
        if not os.path.exists(BLACKLIST_FILE):
            with open(BLACKLIST_FILE, 'w') as f:
                json.dump({}, f)
            return {}
        
        with open(BLACKLIST_FILE, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ blacklist.json: {str(e)}")
        return {}

def save_blacklist(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    try:
        with open(BLACKLIST_FILE, 'w') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è blacklist.json: {str(e)}")
        return False

async def generate_aml_report(address: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ AML-–æ—Ç—á—ë—Ç–∞"""
    try:
        address_lower = address.lower()
        blacklist = load_blacklist()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
        report = [
            "üîç <b>–û—Ç—á—ë—Ç AML-–∞–Ω–∞–ª–∏–∑–∞</b> üîç",
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            f"üÜî <b>–ê–¥—Ä–µ—Å:</b> <code>{address}</code>",
            ""
        ]
        
        # –†–∞–∑–¥–µ–ª —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if address_lower in blacklist:
            reason = blacklist[address_lower].get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            source = blacklist[address_lower].get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
            report.extend([
                "‚ö° <b>–°—Ç–∞—Ç—É—Å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:</b> üî¥ <b>–í–´–°–û–ö–ò–ô –†–ò–°–ö</b>",
                "‚îú‚îÄ üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> " + reason,
                "‚îî‚îÄ üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> " + source,
                ""
            ])
        else:
            report.append("‚ö° <b>–°—Ç–∞—Ç—É—Å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:</b> üü¢ <b>–ß–ò–°–¢–´–ô</b>\n")
        
        # –†–∞–∑–¥–µ–ª –¥–∞–Ω–Ω—ã—Ö Etherscan
        if ETHERSCAN_API_KEY:
            async with aiohttp.ClientSession() as session:
                # –ë–∞–ª–∞–Ω—Å
                balance_url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
                async with session.get(balance_url) as resp:
                    data = await resp.json()
                    balance = int(data['result']) / 10**18 if data.get('status') == '1' else 0
                
                # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tx_url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&apikey={ETHERSCAN_API_KEY}"
                async with session.get(tx_url) as resp:
                    tx_data = await resp.json()
                    tx_count = len(tx_data.get('result', []))
                
                # –ö–æ–Ω—Ç—Ä–∞–∫—Ç
                contract_url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
                async with session.get(contract_url) as resp:
                    contract_data = await resp.json()
                    is_contract = contract_data.get('status') == '1' and contract_data['result'] != 'Contract source code not verified'

            report.extend([
                "üìä <b>–ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞:</b>",
                "‚îú‚îÄ üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {:.4f} ETH".format(balance),
                "‚îú‚îÄ üîÑ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {}".format(tx_count),
                "‚îî‚îÄ üìú <b>–¢–∏–ø:</b> {}".format("–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç" if is_contract else "–í–Ω–µ—à–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç (EOA)"),
                ""
            ])
        else:
            report.append("‚ÑπÔ∏è <i>–î–∞–Ω–Ω—ã–µ Etherscan –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á)</i>\n")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if address_lower in blacklist:
            report.extend([
                "üö® <b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤:</b>",
                "‚îú‚îÄ ‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</b>",
                "‚îî‚îÄ üîí <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò–∑–±–µ–≥–∞–π—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
                ""
            ])
        else:
            report.extend([
                "‚úÖ <b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤:</b>",
                "‚îî‚îÄ üü¢ <b>–†–∏—Å–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</b>",
                ""
            ])
        
        report.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        report.append("üõ°Ô∏è <i>–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AML Security Bot</i>")
        
        return "\n".join(report)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")
        return "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_msg = """
‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AML Security Bot</b> ‚ú®

üîê <i>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫—á–µ–π–Ω-–∞–¥—Ä–µ—Å–æ–≤</i>

üìå <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π Ethereum-–∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x)
–ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ –∫–æ—à–µ–ª—å–∫–µ –∏ —Ä–∏—Å–∫–∞—Ö AML/CFT

üõ°Ô∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á—ë—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ –∫–æ—à–µ–ª—å–∫–∞
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ—à–µ–ª—å–∫–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤

<i>–ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞:</i> <code>0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326</code>
"""
    await update.message.reply_text(welcome_msg, parse_mode="HTML")

async def start_blacklist_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º"""
    await update.message.reply_text(
        "üîí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—ë—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É</b> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
        parse_mode="HTML"
    )
    return ENTER_PHRASE

async def check_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã"""
    user_phrase = update.message.text.strip()
    
    if user_phrase != SECRET_PHRASE:
        await update.message.reply_text("‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞!</b>\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML")
        return ConversationHandler.END
    
    context.user_data['phrase'] = user_phrase
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data='add')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data='remove')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚úÖ <b>–ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –≤–µ—Ä–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    return CHOOSE_ACTION

async def handle_action_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == 'cancel':
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END
    elif action == 'add':
        await query.edit_message_text(
            "üì• <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>ETH-–∞–¥—Ä–µ—Å</b> (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x, 42 —Å–∏–º–≤–æ–ª–∞):",
            parse_mode="HTML"
        )
        return ENTER_ADDRESS
    elif action == 'remove':
        blacklist = load_blacklist()
        if not blacklist:
            await query.edit_message_text("‚ÑπÔ∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return ConversationHandler.END
            
        await query.edit_message_text(
            "üì§ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>ETH-–∞–¥—Ä–µ—Å</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            parse_mode="HTML"
        )
        return CONFIRM_REMOVE

async def check_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    blacklist = load_blacklist()
    address = update.message.text.strip()
    
    if not (address.startswith('0x') and len(address) == 42):
        await update.message.reply_text("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel", parse_mode="HTML")
        return ENTER_ADDRESS
    
    address_lower = address.lower()
    
    if address_lower in blacklist:
        reason = blacklist[address_lower].get('reason', '–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        await update.message.reply_text(
            f"‚ö†Ô∏è <b>–ê–¥—Ä–µ—Å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ</b>\n"
            f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    
    context.user_data['address'] = address_lower
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–∏—á–∏–Ω—É</b> –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:",
        parse_mode="HTML"
    )
    return ENTER_REASON

async def save_to_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    blacklist = load_blacklist()
    reason = update.message.text.strip()
    address = context.user_data['address']
    user = update.effective_user
    
    blacklist[address] = {
        'reason': reason,
        'source': "–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
        'added_by': user.id,
        'username': user.username,
        'date': str(asyncio.get_event_loop().time())
    }
    
    if save_blacklist(blacklist):
        await update.message.reply_text(
            f"‚úÖ <b>–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!</b>\n\n"
            f"<code>{address}</code>\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    return ConversationHandler.END

async def remove_from_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    blacklist = load_blacklist()
    address = update.message.text.strip().lower()
    
    if address not in blacklist:
        await update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        return ConversationHandler.END
    
    removed_entry = blacklist.pop(address)
    
    if save_blacklist(blacklist):
        await update.message.reply_text(
            f"‚úÖ <b>–ê–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!</b>\n\n"
            f"<code>{address}</code>\n"
            f"üóë –ë—ã–ª–∞ –ø—Ä–∏—á–∏–Ω–∞: {removed_entry.get('reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    return ConversationHandler.END

async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–¥—Ä–µ—Å–∞"""
    try:
        address = update.message.text.strip()
        
        if not (address.startswith("0x") and len(address) == 42):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞</b>\n"
                "Ethereum-–∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω:\n"
                "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x\n"
                "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞\n"
                "‚Ä¢ –ü—Ä–∏–º–µ—Ä: <code>0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326</code>",
                parse_mode="HTML"
            )
            return
        
        msg = await update.message.reply_text("üîÑ <i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å...</i>", parse_mode="HTML")
        report = await generate_aml_report(address)
        await msg.edit_text(report, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
            "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª blacklist.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(BLACKLIST_FILE):
        with open(BLACKLIST_FILE, 'w') as f:
            json.dump({}, f)
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")

    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('blacklist', start_blacklist_management)],
        states={
            ENTER_PHRASE: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_phrase)],
            CHOOSE_ACTION: [CallbackQueryHandler(handle_action_choice)],
            ENTER_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_address)],
            ENTER_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_to_blacklist)],
            CONFIRM_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_from_blacklist)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address))
    
    logger.info("–ó–∞–ø—É—Å–∫ AML Security Bot...")
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
