import logging
import os
import json
import asyncio
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
ADD_ADDRESS, ADD_REASON, ADD_SOURCE = range(3)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")
BLOCKED_FILE = "blocked_addresses.json"

if not TOKEN or not ETHERSCAN_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_TOKEN –∏ ETHERSCAN_API_KEY –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BlocklistManager:
    def __init__(self, file_path):
        self.file_path = file_path
        self.blocked_addresses = {}
        self.load_blocklist()
    
    def load_blocklist(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.file_path, 'r') as f:
                self.blocked_addresses = json.load(f)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.blocked_addresses)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
            self.blocked_addresses = {}
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞")
            self.blocked_addresses = {}
    
    def is_blocked(self, address):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        return self.blocked_addresses.get(address.lower())

    def add_to_blocklist(self, address, reason, source="–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        self.blocked_addresses[address.lower()] = {
            "reason": reason,
            "source": source
        }
        self.save_blocklist()
    
    def save_blocklist(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª"""
        with open(self.file_path, 'w') as f:
            json.dump(self.blocked_addresses, f, indent=2)

class EtherscanAPI:
    @staticmethod
    async def get_balance(address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH"""
        url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    if data.get('status') == '1':
                        return int(data['result']) / 10**18
        except Exception as e:
            logger.error(f"Balance error: {str(e)}")
        return 0.0

    @staticmethod
    async def is_contract(address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º"""
        url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    return data.get('status') == '1' and data['result'] != 'Contract source code not verified'
        except Exception as e:
            logger.error(f"Contract check error: {str(e)}")
        return False

async def analyze_address(address: str, blocklist: BlocklistManager) -> dict:
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞"""
    address_lower = address.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    blocked_info = blocklist.is_blocked(address_lower)
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Etherscan
    balance, is_contract = await asyncio.gather(
        EtherscanAPI.get_balance(address),
        EtherscanAPI.is_contract(address)
    )
    
    return {
        'address': address,
        'balance': balance,
        'is_contract': is_contract,
        'blocked': blocked_info if blocked_info else None,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

def format_report(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"""
    report = [
        f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞</b> <code>{data['address']}</code>",
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {data['balance']:.6f} ETH",
        f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if data['is_contract'] else '–ö–æ—à–µ–ª—ë–∫'}"
    ]
    
    if data['blocked']:
        report.append(
            f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ê–¥—Ä–µ—Å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!</b>\n"
            f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {data['blocked']['reason']}\n"
            f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {data['blocked']['source']}"
        )
    else:
        report.append("‚úÖ <b>–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á—ë—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö</b>")
    
    report.append(f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['timestamp']}</i>")
    
    return "\n\n".join(report)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üõ°Ô∏è <b>ETH Address Analyzer</b>\n\n"
        "–Ø –º–æ–≥—É:\n"
        "1. –ü—Ä–æ–≤–µ—Ä—è—Ç—å ETH –∞–¥—Ä–µ—Å–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏ —Ç–∏–ø (–∫–æ—à–µ–ª—ë–∫/–∫–æ–Ω—Ç—Ä–∞–∫—Ç)\n"
        "2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É\n"
        "3. –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n\n"
        "üìå <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "- –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ETH –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /block —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å\n\n"
        "–ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: <code>0x742d35Cc6634C0532925a3b844Bc454e4438f44e</code>",
        parse_mode="HTML"
    )

async def block_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞"""
    await update.message.reply_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ETH –∞–¥—Ä–µ—Å –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x, 42 —Å–∏–º–≤–æ–ª–∞)\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        parse_mode="HTML"
    )
    return ADD_ADDRESS

async def add_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    address = update.message.text.strip()
    
    if not (address.startswith('0x') and len(address) == 42):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return ADD_ADDRESS
    
    context.user_data['block_address'] = address
    await update.message.reply_text(
        "üìù –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–§–∏—à–∏–Ω–≥', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ')\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    return ADD_REASON

async def add_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã"""
    reason = update.message.text.strip()
    context.user_data['block_reason'] = reason
    await update.message.reply_text(
        "üìù –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ñ–∞–ª–æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–î–∞–Ω–Ω—ã–µ –æ—Ç CertiK')\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    return ADD_SOURCE

async def add_source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    source = update.message.text.strip()
    if source == '-':
        source = "–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
    
    blocklist = context.bot_data.get('blocklist')
    if not blocklist:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É")
        return ConversationHandler.END
    
    address = context.user_data['block_address']
    reason = context.user_data['block_reason']
    
    blocklist.add_to_blocklist(address, reason, source)
    
    await update.message.reply_text(
        f"‚úÖ <b>–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n"
        f"<code>{address}</code>\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}",
        parse_mode="HTML"
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.pop('block_address', None)
    context.user_data.pop('block_reason', None)
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    context.user_data.clear()
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–¥—Ä–µ—Å–∞–º–∏"""
    address = update.message.text.strip()
    
    if not (address.startswith('0x') and len(address) == 42):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞",
            parse_mode="HTML"
        )
        return
    
    blocklist = context.bot_data.get('blocklist')
    if not blocklist:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        return
    
    msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...")
    
    try:
        analysis = await analyze_address(address, blocklist)
        await msg.edit_text(format_report(analysis), parse_mode="HTML")
    except Exception as e:
        logger.error(f"Analysis error: {str(e)}")
        await msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–¥—Ä–µ—Å–∞")

async def post_init(application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    blocklist = BlocklistManager(BLOCKED_FILE)
    application.bot_data['blocklist'] = blocklist
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = ApplicationBuilder() \
        .token(TOKEN) \
        .post_init(post_init) \
        .build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /block —Å —Å–æ—Å—Ç–æ—è–Ω–∏–º–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('block', block_command)],
        states={
            ADD_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_address)],
            ADD_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_reason)],
            ADD_SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_source)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()

if __name__ == "__main__":
    main()
