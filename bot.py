import logging
import os
import asyncio
import aiohttp
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")  # –î–æ–±–∞–≤—å—Ç–µ –≤ .env

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def analyze_address(address: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ Etherscan –∏ –±–∞–∑–æ–≤—É—é AML-–ø—Ä–æ–≤–µ—Ä–∫—É"""
    try:
        async with aiohttp.ClientSession() as session:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Etherscan
            balance_url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
            async with session.get(balance_url) as response:
                balance_data = await response.json()
                balance_wei = int(balance_data.get("result", 0))
                balance_eth = balance_wei / 10**18
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            contract_url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
            async with session.get(contract_url) as response:
                contract_data = await response.json()
                is_contract = contract_data.get("result") not in ["Contract source code not verified", "Invalid API Key"]
            
            # 3. –ë–∞–∑–æ–≤–∞—è AML-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø—Ä–∏–º–µ—Ä)
            risky_addresses = {
                "0x8576acc5c05d6ce88f4e49bf65bdf0c62f91353c": "‚ùó –ò–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å",
                "0x1da5821544e25c636c1417ba96ade4cf6d2f9b5a": "‚ùó –§–∏—à–∏–Ω–≥"
            }
            aml_status = risky_addresses.get(address.lower(), "‚úÖ –†–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
            return (
                f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞:</b> <code>{address}</code>\n\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance_eth:.4f} ETH\n"
                f"üìú <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {'‚úÖ –î–∞' if is_contract else '‚ùå –ù–µ—Ç'}\n"
                f"üõ°Ô∏è <b>AML-—Å—Ç–∞—Ç—É—Å:</b> {aml_status}\n\n"
                f"<i>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ Etherscan API</i>"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (start, handle_message, main) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è <b>AML Ethereum Checker</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH-–∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326</code>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        address = update.message.text.strip()
        
        if not (address.startswith("0x") and len(address) == 42):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å...")
        result = await analyze_address(address)
        await msg.edit_text(result, parse_mode="HTML")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder() \
        .token(TOKEN) \
        .http_version("1.1") \
        .get_updates_http_version("1.1") \
        .pool_timeout(30) \
        .build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
