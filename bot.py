import logging
import os
import asyncio
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY") or "YOUR_API_KEY"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AddressValidator:
    @staticmethod
    def is_valid_eth_address(address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ETH –∞–¥—Ä–µ—Å–∞"""
        if not isinstance(address, str):
            return False
        address = address.strip()
        if not address.startswith('0x'):
            return False
        if len(address) != 42:
            return False
        try:
            int(address, 16)
            return True
        except ValueError:
            return False

class EtherscanAPI:
    @staticmethod
    async def fetch_data(url: str) -> dict:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status == 200:
                        return await resp.json()
                    return {"status": "0", "message": f"HTTP error {resp.status}"}
        except Exception as e:
            logger.error(f"API request failed: {str(e)}")
            return {"status": "0", "message": str(e)}

    @staticmethod
    async def get_balance(address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
        data = await EtherscanAPI.fetch_data(url)
        if data.get('status') == '1':
            return int(data['result']) / 10**18
        logger.error(f"Balance check failed: {data.get('message')}")
        return 0.0

    @staticmethod
    async def get_risk_data(address: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ Etherscan"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ (—á–∞—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        url = f"https://api.etherscan.io/api?module=account&action=tokentx&address={address}&startblock=0&endblock=99999999&sort=asc&apikey={ETHERSCAN_API_KEY}"
        data = await EtherscanAPI.fetch_data(url)
        
        if isinstance(data.get('result'), str) and "blocked" in data['result'].lower():
            return {
                "risk": True,
                "reason": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Etherscan",
                "source": "Etherscan Token API"
            }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        tx_url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&sort=asc&apikey={ETHERSCAN_API_KEY}"
        tx_data = await EtherscanAPI.fetch_data(tx_url)
        
        if isinstance(tx_data.get('result'), str) and "blocked" in tx_data['result'].lower():
            return {
                "risk": True,
                "reason": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è ETH –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
                "source": "Etherscan Transaction API"
            }
        
        return {"risk": False}

    @staticmethod
    async def get_contract_info(address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º"""
        url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
        data = await EtherscanAPI.fetch_data(url)
        return data.get('status') == '1' and data['result'] != 'Contract source code not verified'

    @staticmethod
    async def get_transaction_count(address: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&sort=asc&apikey={ETHERSCAN_API_KEY}"
        data = await EtherscanAPI.fetch_data(url)
        return len(data.get('result', [])) if data.get('status') == '1' else 0

class AddressAnalyzer:
    @staticmethod
    async def full_analysis(address: str) -> dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞"""
        if not AddressValidator.is_valid_eth_address(address):
            raise ValueError("Invalid ETH address format")

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        balance, risk, is_contract, tx_count = await asyncio.gather(
            EtherscanAPI.get_balance(address),
            EtherscanAPI.get_risk_data(address),
            EtherscanAPI.get_contract_info(address),
            EtherscanAPI.get_transaction_count(address)
        )

        return {
            'address': address,
            'balance': balance,
            'risk': risk,
            'is_contract': is_contract,
            'tx_count': tx_count,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'success': True
        }

def format_report(analysis: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    balance_msg = f"{analysis['balance']:.6f} ETH"
    if analysis['balance'] == 0:
        balance_msg += " (–ø—É—Å—Ç–æ–π)"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∏—Å–∫–∞—Ö
    if analysis['risk']['risk']:
        risk_msg = (
            f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ê–¥—Ä–µ—Å –æ–ø–∞—Å–µ–Ω!</b>\n"
            f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {analysis['risk']['reason']}\n"
            f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {analysis['risk']['source']}\n\n"
            f"‚ö†Ô∏è <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ª—é–±—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç—Ç–∏–º –∞–¥—Ä–µ—Å–æ–º</i>"
        )
    else:
        risk_msg = "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞</b>"

    return (
        f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞</b> <code>{analysis['address']}</code>\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance_msg}\n"
        f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if analysis['is_contract'] else '–û–±—ã—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫'}\n"
        f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {analysis['tx_count']}\n\n"
        f"{risk_msg}\n\n"
        f"<i>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: {analysis['timestamp']}</i>"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ETH –∫–æ—à–µ–ª—å–∫–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ETH –∞–¥—Ä–µ—Å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x, 42 —Å–∏–º–≤–æ–ª–∞) –∏ —è –ø—Ä–æ–≤–µ—Ä—é:\n"
        "- –¢–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ ETH\n"
        "- –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º\n"
        "- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "- –ù–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0x742d35Cc6634C0532925a3b844Bc454e4438f44e</code>",
        parse_mode="HTML"
    )

async def analyze_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        address = update.message.text.strip()
        
        if not AddressValidator.is_valid_eth_address(address):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞!</b>\n"
                "ETH –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω:\n"
                "- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x\n"
                "- –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 42 —Å–∏–º–≤–æ–ª–∞\n"
                "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 0-9 –∏ a-f\n\n"
                "–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:\n"
                "<code>0x742d35Cc6634C0532925a3b844Bc454e4438f44e</code>",
                parse_mode="HTML"
            )
            return

        msg = await update.message.reply_text("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —Å Etherscan...")
        
        try:
            analysis = await AddressAnalyzer.full_analysis(address)
            if not analysis.get('success', True):
                raise ValueError("Analysis failed")
                
            report = format_report(analysis)
            await msg.edit_text(report, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Analysis failed: {str(e)}")
            await msg.edit_text(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ</b>\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –ê–¥—Ä–µ—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                "- –ü—Ä–æ–±–ª–µ–º—ã —Å API Etherscan\n"
                "- –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"Handler error: {str(e)}")
        await update.message.reply_text(
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

def main():
    app = ApplicationBuilder() \
        .token(TOKEN) \
        .http_version("1.1") \
        .get_updates_http_version("1.1") \
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_address))

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
