import logging
import os
import asyncio
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY") or "YOUR_API_KEY"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class RiskAnalyzer:
    @staticmethod
    async def check_address_risk(address: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ Etherscan API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&page=1&offset=1&sort=asc&apikey={ETHERSCAN_API_KEY}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    
                    # –ö–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    if data.get("message") == "NOTOK" and "blocked" in data.get("result", "").lower():
                        return {
                            "risk": True,
                            "reason": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Etherscan API)",
                            "source": "Etherscan Transaction API"
                        }
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API —Ç–æ–∫–µ–Ω–æ–≤
                token_url = f"https://api.etherscan.io/api?module=account&action=tokentx&address={address}&startblock=0&endblock=99999999&sort=asc&apikey={ETHERSCAN_API_KEY}"
                async with session.get(token_url) as token_resp:
                    token_data = await token_resp.json()
                    if token_data.get("message") == "NOTOK" and "blocked" in token_data.get("result", "").lower():
                        return {
                            "risk": True,
                            "reason": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤",
                            "source": "Etherscan Token API"
                        }
            
            return {"risk": False}
            
        except Exception as e:
            logger.error(f"Risk check error: {str(e)}")
            return {"risk": False, "error": str(e)}

class AddressAnalyzer:
    @staticmethod
    async def get_transactions(address: str) -> list:
        url = f"https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&sort=asc&apikey={ETHERSCAN_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                return data.get('result', []) if data.get('status') == '1' else []

    @staticmethod
    async def analyze_address(address: str) -> dict:
        try:
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                balance_url = f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
                async with session.get(balance_url) as resp:
                    data = await resp.json()
                    balance = int(data['result']) / 10**18 if data.get('status') == '1' else 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                contract_url = f"https://api.etherscan.io/api?module=contract&action=getabi&address={address}&apikey={ETHERSCAN_API_KEY}"
                async with session.get(contract_url) as resp:
                    contract_data = await resp.json()
                    is_contract = contract_data.get('status') == '1' and contract_data['result'] != 'Contract source code not verified'

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
                risk_info = await RiskAnalyzer.check_address_risk(address)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                transactions = await AddressAnalyzer.get_transactions(address)
                tx_count = len(transactions)
                first_seen = datetime.fromtimestamp(int(transactions[0]['timeStamp'])) if tx_count > 0 else None

                return {
                    'address': address,
                    'balance': balance,
                    'is_contract': is_contract,
                    'risk': risk_info,
                    'tx_count': tx_count,
                    'first_seen': first_seen,
                    'transactions': transactions
                }

        except Exception as e:
            logger.error(f"Address analysis error: {str(e)}")
            raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è <b>Etherscan Address Analyzer</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ETH-–∞–¥—Ä–µ—Å (0x...) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0x000000000000000880620000000203571704007</code>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        address = update.message.text.strip()
        if not (address.startswith("0x") and len(address) == 42):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞! –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ –∏–º–µ—Ç—å 42 —Å–∏–º–≤–æ–ª–∞")
            return

        msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–¥—Ä–µ—Å...")
        analysis = await AddressAnalyzer.analyze_address(address)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞</b> <code>{address}</code>\n\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {analysis['balance']:.4f} ETH\n"
            f"üìú <b>–¢–∏–ø:</b> {'–ö–æ–Ω—Ç—Ä–∞–∫—Ç' if analysis['is_contract'] else '–ö–æ—à–µ–ª—ë–∫'}\n"
            f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {analysis['tx_count']}\n"
            f"üìÖ <b>–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {analysis['first_seen'].strftime('%Y-%m-%d') if analysis['first_seen'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        if analysis['risk']['risk']:
            report += (
                f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ê–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n"
                f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {analysis['risk']['reason']}\n"
                f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {analysis['risk']['source']}\n\n"
                f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:\n"
                f"- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤ (USDT, USDC)\n"
                f"- –û—Ç–∫–∞–∑ –æ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±–∏—Ä–∂–∞–º–∏\n"
            )
        else:
            report += "‚úÖ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</b> (–ø–æ –¥–∞–Ω–Ω—ã–º Etherscan API)"
        
        await msg.edit_text(report, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Message handling error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–¥—Ä–µ—Å–∞")

def main():
    app = ApplicationBuilder() \
        .token(TOKEN) \
        .http_version("1.1") \
        .get_updates_http_version("1.1") \
        .pool_timeout(30) \
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling(
        poll_interval=1.0,
        timeout=30,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    asyncio.run(main())
