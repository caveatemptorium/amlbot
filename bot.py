import logging
import os
import asyncio
import aiohttp
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

async def fetch_etherscan(address: str, action: str) -> dict:
    """–ó–∞–ø—Ä–æ—Å –∫ Etherscan API"""
    url = f"https://api.etherscan.io/api?module=account&action={action}&address={address}&tag=latest&apikey={ETHERSCAN_API_KEY}"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=10) as response:
                return await response.json() if response.status == 200 else None
        except Exception as e:
            logger.error(f"Etherscan error: {str(e)}")
            return None

async def check_aml_risks(address: str) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ AML-—Ä–∏—Å–∫–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    risks = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Etherscan (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏)
    etherscan_data = await fetch_etherscan(address, "getsourcecode")
    if etherscan_data and etherscan_data.get('result'):
        if etherscan_data['result'][0].get('Proxy') == '1':
            risks.append("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç-–ø—Ä–æ–∫—Å–∏")
        if "phish" in etherscan_data['result'][0].get('ContractName', '').lower():
            risks.append("üö® –í–æ–∑–º–æ–∂–Ω—ã–π —Ñ–∏—à–∏–Ω–≥")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ AML-–±–∞–∑—ã (–ø—Ä–∏–º–µ—Ä)
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –±–∞–∑–µ AML (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
            async with session.get(
                f"https://api.amlbot.com/v1/check/{address}",
                timeout=5
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('risk_score', 0) > 70:
                        risks.append(f"üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ AML ({data['risk_score']}/100)")
    except:
        pass

    # 3. –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ (–ø—Ä–∏–º–µ—Ä)
    risky_addresses = {
        "0x8576acc5c05d6ce88f4e49bf65bdf0c62f91353c": "‚ùó –ò–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å",
        "0x1da5821544e25c636c1417ba96ade4cf6d2f9b5a": "‚ùó –§–∏—à–∏–Ω–≥"
    }
    if address.lower() in risky_addresses:
        risks.append(risky_addresses[address.lower()])

    return risks if risks else ["‚úÖ AML-—Ä–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"]

async def analyze_address(address: str) -> str:
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞"""
    try:
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        balance_data = await fetch_etherscan(address, "balance")
        contract_data = await fetch_etherscan(address, "getabi")
        tx_data = await fetch_etherscan(address, "txlist")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        balance = int(balance_data['result']) / 10**18 if balance_data else 0
        is_contract = contract_data['result'] != "Contract source code not verified" if contract_data else False
        tx_count = len(tx_data['result']) if tx_data and tx_data['status'] == '1' else 0
        
        # AML-–ø—Ä–æ–≤–µ—Ä–∫–∞
        aml_risks = await check_aml_risks(address)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = [
            f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞</b> <code>{address}</code>",
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.4f} ETH",
            f"üìú <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {'‚úÖ' if is_contract else '‚ùå'}",
            f"üìä <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {tx_count}",
            "\nüõ°Ô∏è <b>AML-–ø—Ä–æ–≤–µ—Ä–∫–∞:</b>",
            *[f"‚Ä¢ {risk}" for risk in aml_risks]
        ]
        
        return "\n".join(report)
    
    except Exception as e:
        logger.error(f"Analysis error: {str(e)}")
        return "‚õî –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–¥—Ä–µ—Å–∞"

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è <b>ETH AML Analyzer</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Ethereum-–∞–¥—Ä–µ—Å (0x...) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0x1f9090aaE28b8a3dCeaDf281B0F12828e676c326</code>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        address = update.message.text.strip()
        if not (address.startswith("0x") and len(address) == 42):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞")
            return
        
        msg = await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        result = await analyze_address(address)
        await msg.edit_text(result, parse_mode="HTML")
    
    except Exception as e:
        logger.error(f"Handler error: {str(e)}")
        await update.message.reply_text("üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

def main():
    app = ApplicationBuilder() \
        .token(TOKEN) \
        .http_version("1.1") \
        .get_updates_http_version("1.1") \
        .pool_timeout(60) \
        .build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
