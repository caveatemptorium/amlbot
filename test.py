import os
import json
import random
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("7865332518:AAGeQppEvQeI0cvM8-QAlE1MXc0_voRUjIg")

# –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
REASONS = [
    "–§–∏—à–∏–Ω–≥",
    "–û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥",
    "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
    "–í–∑–ª–æ–º–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫",
    "–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "–°–∫–∞–º –ø—Ä–æ–µ–∫—Ç",
    "–£—á–∞—Å—Ç–∏–µ –≤ —Å—Ö–µ–º–µ –ü–æ–Ω—Ü–∏",
    "Tornado Cash"
]

SOURCES = [
    "Etherscan Blacklist",
    "Chainalysis Report",
    "CertiK Alert",
    "–ñ–∞–ª–æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –±–∞–∑–∞",
    "TRM Labs Data",
    "OpenSanctions"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        "üõ†Ô∏è <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>txt-—Ñ–∞–π–ª</b> —Å –∞–¥—Ä–µ—Å–∞–º–∏ (–∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ), "
        "–∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è –Ω–∏—Ö JSON –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏.",
        parse_mode="HTML"
    )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(update.message.document)
        file_path = f"temp_{update.message.document.file_name}"
        await file.download_to_drive(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if not file_path.endswith('.txt'):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt")
            os.remove(file_path)
            return
        
        # –ß–∏—Ç–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
        with open(file_path, 'r') as f:
            addresses = [line.strip() for line in f.readlines() if line.strip()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤
        valid_addresses = []
        for addr in addresses:
            if addr.startswith('0x') and len(addr) == 42:
                valid_addresses.append(addr.lower())
        
        if not valid_addresses:
            await update.message.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö ETH-–∞–¥—Ä–µ—Å–æ–≤ (–¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞)")
            os.remove(file_path)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        blacklist = {}
        for addr in valid_addresses:
            blacklist[addr] = {
                "reason": random.choice(REASONS),
                "source": random.choice(SOURCES),
                "added_by": "generator_bot"
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_file = "blacklist_generated.json"
        with open(output_file, 'w') as f:
            json.dump(blacklist, f, indent=2, ensure_ascii=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_document(
            document=open(output_file, 'rb'),
            caption=f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è {len(valid_addresses)} –∞–¥—Ä–µ—Å–æ–≤"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(file_path)
        os.remove(output_file)
        
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        if 'file_path' in locals() and os.path.exists(file_path):
            os.remove(file_path)
        if 'output_file' in locals() and os.path.exists(output_file):
            os.remove(output_file)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
